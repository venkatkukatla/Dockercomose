version: '3'

services:
  frontend:
         image: kukatlavenkat/webng:v1
         container_name: web
         ports:
           - "80:80"
         depends_on:
           backend:
             condition: service_healthy
         volumes:
               - volumeweb:/etc/nginx
         networks:
          - user1


  backend:
    image: kukatlavenkat/django:v4
     #   build:
     #      context: .
     #      dockerfile: Dockerfile

    depends_on:

      db:
        condition: service_healthy

    container_name: app
    ports:
      - "8000:8000"
    volumes:
      - volumeapp:/app
    
    networks:
      - user1
      - user2
    environment:
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: institute
    # Other configuration for the web service
    # it i means tdin_open t means tty
    stdin_open: true
    tty: true
    working_dir: /app
    #command: ["/bin/bash"]
    command: /bin/bash -c "/app/startup.sh"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:8000 || exit 1"]
      interval: 10s
      retries: 5
    
  # frontend:
  #        image: kukatlavenkat/webng:v1
  #        container_name: ng
  #        ports:
  #          - "80:80"
  #        depends_on:
  #          web:
  #            condition: service_healthy
  #        volumes:
  #              - volumeng:/app     
  #        networks:
  #         - user1

  db:
    image: kukatlavenkat/mysql:v1
    container_name: db
    ports:
      - "3306:3306"
    volumes:
      - volumedb:/var/lib/mysql
    networks:
      - user2
          
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: institute
      # Other MySQL environment variables 
    # Health check configuration for the db service
    healthcheck:
      test: ["CMD", "mysqladmin", "ping" ,"-h" ,"localhost"]
      #interval: 10s
      timeout:  20s
      retries: 10
      #start_period: 30s

networks:
  user1:
    driver: bridge
  #  external: true
    name: user1

  user2:
     driver: bridge
     name: user2

volumes:
  volumeapp:
    #external: true
    name: volumeapp

  volumedb:
    #external: true
    name: volumedb

  volumeweb:
    name: volumeweb



# docker compose up -d

# docker exec web python3 manage.py runserver 0.0.0.0:8000

#docker compose up -d && docker exec web python3 manage.py runserver 0.0.0.0:8000